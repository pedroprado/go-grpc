// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// IndividualServiceClient is the client API for IndividualService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type IndividualServiceClient interface {
	GetIndividual(ctx context.Context, in *GetQuery, opts ...grpc.CallOption) (*Individual, error)
	CreateIndividual(ctx context.Context, in *Individual, opts ...grpc.CallOption) (*Individual, error)
	ListIndividuals(ctx context.Context, in *ListQuery, opts ...grpc.CallOption) (*Individuals, error)
}

type individualServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewIndividualServiceClient(cc grpc.ClientConnInterface) IndividualServiceClient {
	return &individualServiceClient{cc}
}

func (c *individualServiceClient) GetIndividual(ctx context.Context, in *GetQuery, opts ...grpc.CallOption) (*Individual, error) {
	out := new(Individual)
	err := c.cc.Invoke(ctx, "/IndividualService/GetIndividual", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *individualServiceClient) CreateIndividual(ctx context.Context, in *Individual, opts ...grpc.CallOption) (*Individual, error) {
	out := new(Individual)
	err := c.cc.Invoke(ctx, "/IndividualService/CreateIndividual", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *individualServiceClient) ListIndividuals(ctx context.Context, in *ListQuery, opts ...grpc.CallOption) (*Individuals, error) {
	out := new(Individuals)
	err := c.cc.Invoke(ctx, "/IndividualService/ListIndividuals", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IndividualServiceServer is the server API for IndividualService service.
// All implementations must embed UnimplementedIndividualServiceServer
// for forward compatibility
type IndividualServiceServer interface {
	GetIndividual(context.Context, *GetQuery) (*Individual, error)
	CreateIndividual(context.Context, *Individual) (*Individual, error)
	ListIndividuals(context.Context, *ListQuery) (*Individuals, error)
	mustEmbedUnimplementedIndividualServiceServer()
}

// UnimplementedIndividualServiceServer must be embedded to have forward compatible implementations.
type UnimplementedIndividualServiceServer struct {
}

func (UnimplementedIndividualServiceServer) GetIndividual(context.Context, *GetQuery) (*Individual, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIndividual not implemented")
}
func (UnimplementedIndividualServiceServer) CreateIndividual(context.Context, *Individual) (*Individual, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateIndividual not implemented")
}
func (UnimplementedIndividualServiceServer) ListIndividuals(context.Context, *ListQuery) (*Individuals, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListIndividuals not implemented")
}
func (UnimplementedIndividualServiceServer) mustEmbedUnimplementedIndividualServiceServer() {}

// UnsafeIndividualServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to IndividualServiceServer will
// result in compilation errors.
type UnsafeIndividualServiceServer interface {
	mustEmbedUnimplementedIndividualServiceServer()
}

func RegisterIndividualServiceServer(s grpc.ServiceRegistrar, srv IndividualServiceServer) {
	s.RegisterService(&IndividualService_ServiceDesc, srv)
}

func _IndividualService_GetIndividual_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IndividualServiceServer).GetIndividual(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/IndividualService/GetIndividual",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IndividualServiceServer).GetIndividual(ctx, req.(*GetQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _IndividualService_CreateIndividual_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Individual)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IndividualServiceServer).CreateIndividual(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/IndividualService/CreateIndividual",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IndividualServiceServer).CreateIndividual(ctx, req.(*Individual))
	}
	return interceptor(ctx, in, info, handler)
}

func _IndividualService_ListIndividuals_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IndividualServiceServer).ListIndividuals(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/IndividualService/ListIndividuals",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IndividualServiceServer).ListIndividuals(ctx, req.(*ListQuery))
	}
	return interceptor(ctx, in, info, handler)
}

// IndividualService_ServiceDesc is the grpc.ServiceDesc for IndividualService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var IndividualService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "IndividualService",
	HandlerType: (*IndividualServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetIndividual",
			Handler:    _IndividualService_GetIndividual_Handler,
		},
		{
			MethodName: "CreateIndividual",
			Handler:    _IndividualService_CreateIndividual_Handler,
		},
		{
			MethodName: "ListIndividuals",
			Handler:    _IndividualService_ListIndividuals_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/individual.proto",
}
